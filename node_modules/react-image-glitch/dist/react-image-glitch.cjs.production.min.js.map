{"version":3,"file":"react-image-glitch.cjs.production.min.js","sources":["../src/helpers.ts","../src/components/Slice.tsx","../src/components/GlitchedImage.tsx","../src/hooks.ts"],"sourcesContent":["import { DimensionsType, heightOffsetType } from \"./Typings\"\n\nexport const getRandomNumberBetween = (min: number, max: number) => {\n  return Math.floor(Math.random() * max) + min\n}\n\nexport const createSlices = (height: number) => {\n  let heightOffsets: heightOffsetType[] = []\n  for (let i = 0; i < height;) {\n    const randomHeight = getRandomNumberBetween(3, 20)\n    const newHeightOffset = { height: randomHeight, offset: i }\n    heightOffsets.push(newHeightOffset)\n    i += randomHeight\n  }\n  const trimmedHeightOffsets = heightOffsets.slice(0, -1)\n  const [lastSet] = trimmedHeightOffsets.slice(-1)\n  const lastHeightOffset = {\n    height: height - (lastSet?.offset + lastSet?.height),\n    offset: lastSet?.offset + lastSet?.height,\n  }\n  if (!lastSet) return []\n  return [...trimmedHeightOffsets, lastHeightOffset]\n}\n\nexport const getRatio = (imageDims: DimensionsType) => {\n  return imageDims.width / imageDims.height\n}\n\nexport const getRatioImageSize = (\n  containerDims: DimensionsType,\n  imageDims: DimensionsType,\n) => {\n  const imageRatio = getRatio(imageDims)\n  return {\n    height: containerDims.height,\n    width: containerDims.height * imageRatio,\n  }\n}\n","import React, { useState, useEffect } from 'react'\nimport { getRandomNumberBetween } from '../helpers'\n\nexport const Slice: React.FC<{\n  isGlitching: boolean,\n  top: number,\n  imageHeight: number,\n  image: string,\n}> = ({ isGlitching, top, imageHeight, image }) => {\n  const [translateX, setTranslateX] = useState(0)\n  const [hue, setHue] = useState(0)\n  const [negativeTranslate, setNegativeTranslate] = useState(false)\n\n  const glitch = () => {\n    setNegativeTranslate(getRandomNumberBetween(0, 2) !== 0)\n    setTranslateX(getRandomNumberBetween(1, 25))\n    setHue((getRandomNumberBetween(0, 360)))\n  }\n\n  const returnToNormal = () => {\n    setTranslateX(0)\n    setHue(0)\n  }\n\n  useEffect(() => {\n    const randomInterval = getRandomNumberBetween(1, 1000)\n    const interval = setInterval(() => {\n      isGlitching ? glitch() : returnToNormal()\n    }, randomInterval)\n    return () => clearInterval(interval)\n  })\n\n  return (\n    <div\n      className=\"Slice\"\n      style={{\n        backgroundImage: `url(${image})`,\n        backgroundSize: 'contain',\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'center',\n        height: imageHeight,\n        transform: `translateY(-${top}px) translateX(${negativeTranslate ? '-' : ''}${translateX}px)`,\n        filter: `hue-rotate(${hue}deg)`,\n      }}\n    />\n  )\n}\n","import React, { useState, useEffect, useRef } from 'react'\nimport { createSlices, getRandomNumberBetween, getRatioImageSize } from '../helpers'\nimport { useObserver } from '../hooks'\nimport { heightOffsetType } from '../Typings'\nimport { Slice } from './Slice'\n\nexport const GlitchedImage: React.FC<{ image: string}> = ({ image }) => {\n  const slicesRef = useRef<HTMLDivElement>(null)\n  const [containerDims, setContainerDims] = useState({ width: 0, height: 0 })\n  const [imageDims, setImageDims] = useState({ width: 0, height: 0 })\n  const [heightOffsets, setHeightOffsets] = useState<heightOffsetType[]>([])\n  const [isGlitching, setIsGlitching] = useState(false)\n  const runInObserver = () => {\n    setContainerDims({\n      width: slicesRef.current?.clientWidth || 0,\n      height: slicesRef.current?.clientHeight || 0,\n    })\n  }\n  useObserver(runInObserver, slicesRef)\n\n\n  // get image width and height\n  useEffect(() => {\n    const myImage = new Image()\n    myImage.onload = () => {\n      setImageDims(\n        getRatioImageSize(\n          containerDims,\n          { height: myImage.height, width: myImage.width },\n        ),\n      )\n    }\n    myImage.src = image\n\n  }, [image, containerDims])\n\n  // trigger glitching with random intervals\n  useEffect(() => {\n    const lowRandom = getRandomNumberBetween(100, 600)\n    const highRandom = getRandomNumberBetween(1000, 3000)\n    const timer = isGlitching ? lowRandom : highRandom\n    const interval = setInterval(() => {\n      setIsGlitching((prevGlitching) => !prevGlitching)\n    }, timer)\n    return () => clearInterval(interval)\n  }, [isGlitching])\n\n  // create heightOffsets array with container height\n  useEffect(() => {\n    setHeightOffsets(createSlices(containerDims.height))\n  }, [containerDims.height, containerDims.width])\n  return (\n    <div style={{ height: '100%', width: '100%' }} ref={slicesRef}>\n      {heightOffsets.map((heightOffset, i) => (\n        <div\n          key={i}\n          style={{\n            position: 'relative',\n            height: heightOffset.height,\n            overflow: 'hidden',\n          }}\n        >\n          <Slice\n            isGlitching={isGlitching}\n            top={heightOffset.offset}\n            imageHeight={imageDims.height}\n            image={image}\n          />\n        </div>\n      ))}\n    </div>\n  )\n}\n","import { RefObject, useEffect, useRef } from 'react'\n\nexport const useObserver = (callback: () => void, element: RefObject<HTMLDivElement>) => {\n  const observer = useRef<any>(null)\n\n  useEffect(() => {\n    if (!element.current) return\n    const { current } = element\n    const observe = () => {\n      if (current && observer.current) {\n        observer.current.observe(current)\n      }\n    }\n    // if we are already observing old element\n    if (observer && observer.current && current) {\n      observer.current.unobserve(current)\n    }\n    observer.current = new ResizeObserver(callback);\n    observe()\n\n    return () => {\n      if (observer && observer.current && current) {\n        observer.current.unobserve(current)\n      }\n    }\n  }, [element, callback])\n}\n"],"names":["getRandomNumberBetween","min","max","Math","floor","random","Slice","isGlitching","top","imageHeight","image","useState","translateX","setTranslateX","hue","setHue","negativeTranslate","setNegativeTranslate","useEffect","randomInterval","interval","setInterval","clearInterval","React","className","style","backgroundImage","backgroundSize","backgroundRepeat","backgroundPosition","height","transform","filter","callback","element","observer","slicesRef","useRef","width","containerDims","setContainerDims","imageDims","setImageDims","heightOffsets","setHeightOffsets","setIsGlitching","current","clientWidth","clientHeight","unobserve","ResizeObserver","observe","myImage","Image","onload","imageRatio","getRatio","getRatioImageSize","src","lowRandom","highRandom","prevGlitching","i","randomHeight","push","offset","trimmedHeightOffsets","slice","lastSet","createSlices","ref","map","heightOffset","key","position","overflow"],"mappings":"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"}